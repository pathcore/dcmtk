# Find TIFF
IF(DCMTK_WITH_TIFF)
  FIND_PACKAGE(TIFF QUIET)
  # turn off library if it could not be found
  IF(NOT TIFF_FOUND)
    MESSAGE(STATUS "Warning: TIFF support will be disabled because libtiff was not found.")
    SET(DCMTK_WITH_TIFF OFF CACHE BOOL "" FORCE)
    SET(WITH_LIBTIFF "")
  ELSE(NOT TIFF_FOUND)
    MESSAGE(STATUS "Info: DCMTK TIFF support will be enabled")
    SET(WITH_LIBTIFF 1)
    # libtiff can be compiled with libjpeg support; if available, add libjpeg to library and include path
    FIND_PACKAGE(JPEG QUIET)
    INCLUDE_DIRECTORIES(${TIFF_INCLUDE_DIR} ${JPEG_INCLUDE_DIR})
    SET(LIBTIFF_LIBS ${TIFF_LIBRARY} ${JPEG_LIBRARY})
  ENDIF(NOT TIFF_FOUND)
ENDIF(DCMTK_WITH_TIFF)

# Find PNG
IF(DCMTK_WITH_PNG)
  FIND_PACKAGE(PNG QUIET)
  IF(NOT PNG_FOUND)
    SET(DCMTK_WITH_PNG OFF CACHE BOOL "" FORCE)
    MESSAGE(STATUS "Warning: PNG support will be disabled because libpng was not found.")
    SET(WITH_LIBPNG "")
  ELSE(NOT PNG_FOUND)
    MESSAGE(STATUS "Info: DCMTK PNG support will be enabled")
    SET(WITH_LIBPNG 1)
    INCLUDE_DIRECTORIES(${PNG_INCLUDE_DIR})
    SET(LIBPNG_LIBS ${PNG_LIBRARY})
  ENDIF(NOT PNG_FOUND)
ENDIF(DCMTK_WITH_PNG)

# Find OpenSSL
IF(DCMTK_WITH_OPENSSL)
  FIND_PACKAGE(OpenSSL QUIET)
  IF(NOT OPENSSL_FOUND)
    MESSAGE(STATUS "Warning: OPENSSL support will be disabled because openssl was not found.")
    SET(WITH_OPENSSL "")
    SET(DCMTK_WITH_OPENSSL OFF CACHE BOOL "" FORCE)
  ELSE(NOT OPENSSL_FOUND)
    MESSAGE(STATUS "Info: DCMTK OPENSSL support will be enabled")
    SET(WITH_OPENSSL 1)
    INCLUDE_DIRECTORIES(${OPENSSL_INCLUDE_DIR})
    SET(OPENSSL_LIBS ${OPENSSL_LIBRARIES})
  ENDIF(NOT OPENSSL_FOUND)
ENDIF(DCMTK_WITH_OPENSSL)

# Find libXML2
IF(DCMTK_WITH_XML)
  FIND_PACKAGE(LibXml2 QUIET)
  IF(NOT LIBXML2_FOUND)
    MESSAGE(STATUS "Warning: XML support will be disabled because libxml2 was not found.")
    SET(WITH_LIBXML "")
    SET(DCMTK_WITH_XML OFF CACHE BOOL "" FORCE)
  ELSE(NOT LIBXML2_FOUND)
    MESSAGE(STATUS "Info: DCMTK XML support will be enabled")
    SET(WITH_LIBXML 1)
    INCLUDE_DIRECTORIES(${LIBXML2_INCLUDE_DIR})
    SET(LIBXML_LIBS ${LIBXML2_LIBRARIES})
  ENDIF(NOT LIBXML2_FOUND)
ENDIF(DCMTK_WITH_XML)

# Find zlib
IF(DCMTK_WITH_ZLIB)
  FIND_PACKAGE(ZLIB QUIET)
  IF(NOT ZLIB_FOUND)
    MESSAGE(STATUS "Warning: ZLIB support will be disabled because zlib was not found.")
    SET(WITH_ZLIB "")
    SET(DCMTK_WITH_ZLIB OFF CACHE BOOL "" FORCE)
  ELSE(NOT ZLIB_FOUND)
    MESSAGE(STATUS "Info: DCMTK ZLIB support will be enabled")
    SET(WITH_ZLIB 1)
    INCLUDE_DIRECTORIES(${ZLIB_INCLUDE_DIRS})
    SET(ZLIB_LIBS ${ZLIB_LIBRARIES})
  ENDIF(NOT ZLIB_FOUND)
ENDIF(DCMTK_WITH_ZLIB)

# Find libsndfile
IF(DCMTK_WITH_SNDFILE)
  FIND_PACKAGE(Sndfile QUIET)
  IF(NOT SNDFILE_LIBS)
    MESSAGE(STATUS "Warning: SNDFILE support will be disabled because libsndfile was not found.")
    SET(WITH_SNDFILE "")
    SET(DCMTK_WITH_SNDFILE OFF CACHE BOOL "" FORCE)
  ELSE(NOT SNDFILE_LIBS)
    MESSAGE(STATUS "Info: DCMTK SNDFILE support will be enabled")
    SET(WITH_SNDFILE 1)
    INCLUDE_DIRECTORIES(${SNDFILE_INCLUDE_DIRS})
    SET(SNDFILE_LIBS ${SNDFILE_LIBRARIES})
  ENDIF(NOT SNDFILE_LIBS)
ENDIF(DCMTK_WITH_SNDFILE)

# Find libiconv
IF(DCMTK_WITH_ICONV)
  IF(WIN32)
    FIND_PACKAGE(ICONV QUIET)
    IF(NOT LIBICONV_FOUND)
      MESSAGE(STATUS "Warning: ICONV support will be disabled because libiconv was not found. Correct LIBICONV_LIBDIR and LIBICONV_INCLUDE_DIR and re-enable DCMTK_WITH_ICONV.")
      SET(DCMTK_WITH_ICONV OFF CACHE BOOL "" FORCE)
      SET(WITH_LIBICONV "")
    ELSE(NOT LIBICONV_FOUND)
      MESSAGE(STATUS "Info: DCMTK ICONV support will be enabled")
      SET(WITH_LIBICONV 1)
      SET(LIBICONV_INCDIR ${LIBICONV_INCLUDE_DIRS})
      SET(LIBICONV_LIBDIR ${LIBICONV_LIBDIR})
      SET(LIBICONV_LIBS ${LIBICONV_LIBRARIES})
      INCLUDE_DIRECTORIES(${LIBICONV_INCDIR})
    ENDIF(NOT LIBICONV_FOUND)
  ELSE()
    FIND_PACKAGE(ICONV QUIET)
    FIND_PACKAGE(Charset QUIET)
    IF(NOT LIBICONV_FOUND OR NOT LIBCHARSET_FOUND)
      MESSAGE(STATUS "Warning: ICONV support will be disabled because libiconv was not found. Correct LIBICONV_LIBDIR and LIBICONV_INCLUDE_DIR and re-enable DCMTK_WITH_ICONV.")
      SET(DCMTK_WITH_ICONV OFF CACHE BOOL "" FORCE)
      SET(WITH_LIBICONV "")
    ELSE(NOT LIBICONV_FOUND OR NOT LIBCHARSET_FOUND)
      MESSAGE(STATUS "Info: DCMTK ICONV support will be enabled")
      SET(WITH_LIBICONV 1)
      SET(LIBICONV_INCDIR ${LIBICONV_INCLUDE_DIRS} ${LIBCHARSET_INCLUDE_DIRS})
      SET(LIBICONV_LIBDIR ${LIBICONV_LIBDIR})
      SET(LIBICONV_LIBS ${LIBICONV_LIBRARIES} ${LIBCHARSET_LIBRARY})
      INCLUDE_DIRECTORIES(${LIBICONV_INCDIR})
    ENDIF(NOT LIBICONV_FOUND OR NOT LIBCHARSET_FOUND)
  ENDIF()
ENDIF(DCMTK_WITH_ICONV)

# Find libwrap
IF(DCMTK_WITH_WRAP)
  FIND_PACKAGE(Wrap QUIET)
  IF(NOT WRAP_FOUND)
    MESSAGE(STATUS "Warning: WRAP support will be disabled because libwrap was not found.")
    SET(WITH_TCPWRAPPER "")
    SET(DCMTK_WITH_WRAP OFF CACHE BOOL "" FORCE)
  ELSE(NOT WRAP_FOUND)
    MESSAGE(STATUS "Info: DCMTK WRAP support will be enabled")
    SET(WITH_TCPWRAPPER 1)
    INCLUDE_DIRECTORIES(${WRAP_INCLUDE_DIRS})
    SET(WRAP_LIBS ${WRAP_LIBRARIES})
  ENDIF(NOT WRAP_FOUND)
ENDIF(DCMTK_WITH_WRAP)

if(NOT DEFINED DCMTK_WITH_STDLIBC_ICONV)
  include(CheckCXXSourceCompiles)
  CHECK_CXX_SOURCE_COMPILES("#include <iconv.h>\nint main(){iconv_t cd = iconv_open(\"\",\"\");iconv(cd,0,0,0,0);iconv_close(cd);return 0;}" WITH_STDLIBC_ICONV)
  if(WITH_STDLIBC_ICONV)
    message(STATUS "Info: found builtin ICONV support inside the C standard library.")
    set(DCMTK_WITH_STDLIBC_ICONV ON CACHE BOOL "" FORCE)
  else()
    set(DCMTK_WITH_STDLIBC_ICONV OFF CACHE BOOL "" FORCE)
  endif()
endif()

if(DCMTK_WITH_ICU)
  find_package(ICU COMPONENTS uc data QUIET)
  if(NOT ICU_FOUND)
    message(STATUS "Warning: ICU support will be disabled because the ICU were not found.")
    set(DCMTK_WITH_ICU OFF CACHE BOOL "" FORCE)
    set(WITH_ICU "")
  else()
    message(STATUS "Info: DCMTK ICU support will be enabled")
    set(WITH_ICU 1)
    set(ICU_INCDIR ${ICU_INCLUDE_DIR})
    set(ICU_LIBS ${ICU_LIBRARIES})
    include_directories(${ICU_INCLUDE_DIR})
  endif()
endif()

# Find doxygen
if(DCMTK_WITH_DOXYGEN)
  find_package(Doxygen QUIET) # will set variable DOXYGEN_EXECUTABLE
  if(NOT DOXYGEN_FOUND)
    message(STATUS "Warning: DOXYGEN support will be disabled because doxygen was not found.")
    set(DCMTK_WITH_DOXYGEN OFF CACHE BOOL "" FORCE)
  endif()
endif()

if(DCMTK_WITH_ICONV OR DCMTK_WITH_STDLIBC_ICONV)
  include(CheckCXXSourceCompiles)
  set(CMAKE_REQUIRED_INCLUDES ${LIBICONV_INCDIR})
  set(CMAKE_REQUIRED_LIBRARIES ${LIBICONV_LIBS})
  CHECK_CXX_SOURCE_COMPILES("
  #include <iconv.h>
  int main() {
    iconv_t cd = 0;
    const char *in = 0;
    iconv(cd, &in, 0, 0, 0);
    return 0;
  }" LIBICONV_SECOND_ARGUMENT_CONST)
  set(CMAKE_REQUIRED_INCLUDES)
  set(CMAKE_REQUIRED_LIBRARIES)
endif()
